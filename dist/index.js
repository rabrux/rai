// Generated by CoffeeScript 1.12.2
(function() {
  var Dates, Protocol, RAI, Rai, Router, Task, bodyParser, express, fileupload, fs, moment, morgan, path, randomstring,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  moment = require('moment-timezone');

  Dates = (function() {
    function Dates(options) {
      Object.assign(this, options);
    }

    Dates.prototype.toLocal = function(date) {
      var d;
      d = moment();
      if (date) {
        d = moment(date);
      }
      return d.tz(this.getTimezone()).locale(this.getLocale());
    };

    Dates.prototype.now = function() {
      return this.toLocal();
    };

    Dates.prototype.timestamp = function(date) {
      return parseInt(this.toLocal(date).format('x'));
    };

    Dates.prototype.getTimezone = function() {
      return this.timezone;
    };

    Dates.prototype.getLocale = function() {
      return this.locale;
    };

    Dates.prototype.setTimezone = function(timezone) {
      this.timezone = timezone;
    };

    Dates.prototype.setLocale = function(locale) {
      this.locale = locale;
    };

    return Dates;

  })();

  randomstring = require('randomstring');

  path = require('path');

  Task = (function() {
    function Task(task) {
      this._id = this.newId();
      this.type = String;
      this.cmd = String;
      this.args = {};
      this.startedAt = Number;
      this.path = String;
      this.ended = false;
      this.__token = String;
      this.__level = String;
      Object.assign(this, task);
      this.init();
    }

    Task.prototype.init = function() {
      var items;
      if (!this.path) {
        throw 'path is required';
      }
      items = this.path.split(path.sep);
      items.shift();
      if (items.length >= 2) {
        this.type = items.shift();
        return this.cmd = items.shift();
      } else {
        throw 'path must be http://../[agent]/[command]';
      }
    };

    Task.prototype.newId = function() {
      return randomstring.generate({
        length: 32,
        charset: 'alphanumeric'
      });
    };

    Task.prototype.getId = function() {
      return this._id;
    };

    Task.prototype.getType = function() {
      return this.type;
    };

    Task.prototype.getCmd = function() {
      return this.cmd;
    };

    Task.prototype.getArgs = function() {
      return this.args;
    };

    Task.prototype.getToken = function() {
      return this.__token;
    };

    Task.prototype.getLevel = function() {
      return this.__level;
    };

    Task.prototype.setId = function(_id) {
      this._id = _id;
    };

    Task.prototype.setType = function(type) {
      this.type = type;
    };

    Task.prototype.setCmd = function(cmd) {
      this.cmd = cmd;
    };

    Task.prototype.setArgs = function(args) {
      this.args = args;
    };

    Task.prototype.setToken = function(__token) {
      this.__token = __token;
    };

    Task.prototype.setLevel = function(__level) {
      this.__level = __level;
    };

    return Task;

  })();

  bodyParser = require('body-parser');

  morgan = require('morgan');

  fileupload = require('express-fileupload');

  Router = (function() {
    function Router(__smith) {
      this.__smith = __smith;
      this.getApp().use(bodyParser.urlencoded({
        extended: true
      }));
      this.getApp().use(bodyParser.json());
      this.getApp().use(function(req, res, next) {
        res.header('Access-Control-Allow-Origin', '*');
        res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
        res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
        return next();
      });
      this.getApp().use(morgan('-> :date[clf] :method :url :status :response-time ms - :res[content-length]'));
      this.getApp().use(fileupload());
      this.setup();
    }

    Router.prototype.setup = function() {
      var it;
      this.dates = new Dates({
        timezone: this.getAgent().getTimezone(),
        locale: this.getAgent().getLocale()
      });
      it = this;
      return this.getApp().use(function(req, res, next) {
        var task, token;
        if (req.method === 'OPTIONS') {
          console.log('OPTIONS');
          return res.send();
        }
        token = it.getToken(req.headers);
        task = new Task({
          __token: token,
          path: req.path,
          startedAt: it.dates.timestamp(),
          args: Object.assign(req.body, req.query),
          startedAt: it.dates.timestamp(),
          res: res
        });
        if (req.files != null) {
          task.args.files = req.files;
        }
        task.__before = new Task({
          __token: token,
          path: '/auth/level',
          startedAt: it.dates.timestamp(),
          __next: task._id
        });
        return it.startTask(task);
      });
    };

    Router.prototype.startTask = function(task) {
      return this.getAgent().startTask(task);
    };

    Router.prototype.getApp = function() {
      var ref;
      return (ref = this.getAgent()) != null ? ref.app : void 0;
    };

    Router.prototype.getAgent = function() {
      return this.__smith;
    };

    Router.prototype.getToken = function(headers) {
      var parts;
      if (!headers || !(headers != null ? headers.authorization : void 0)) {
        return null;
      }
      parts = headers.authorization.split(' ');
      if (parts.length === 2) {
        return parts[1];
      }
      return null;
    };

    return Router;

  })();

  express = require('express');

  RAI = (function() {
    function RAI(options) {
      this.config = options;
      this.tasks = [];
      this.app = express();
      this.server = require('http').createServer(this.app);
      this.io = require('socket.io')(this.server);
      this.router = null;
      this.setup();
    }

    RAI.prototype.setup = function() {};

    RAI.prototype.run = function() {
      var ref;
      if ((ref = this.server) != null) {
        ref.listen(this.getPort());
      }
      return this.log("magic happends on " + (this.getPort()));
    };

    RAI.prototype.addTask = function(task) {
      return this.tasks.push(task);
    };

    RAI.prototype.findTask = function(task) {
      return this.getTasks().find(function(t) {
        return t._id === task._id;
      });
    };

    RAI.prototype.startTask = function(task) {
      var before, isStaged;
      if (task != null ? task.__before : void 0) {
        before = task.__before;
        delete task.__before;
        this.addTask(task);
        this.addTask(before);
        return this.getIo().of('/gate').to(before.type).emit('init', before);
      }
      isStaged = this.getTasks().find(function(t) {
        return t._id === task._id;
      });
      if (!isStaged) {
        this.addTask(task);
      }
      return this.getIo().of('/gate').to(task.type).emit('init', task);
    };

    RAI.prototype.removeTask = function(task) {
      return this.tasks.splice(this.tasks.indexOf(task), 1);
    };

    RAI.prototype.log = function(msg) {
      if (this.isDebug) {
        console.log(msg);
      }
    };

    RAI.prototype.getConfig = function() {
      return this.config;
    };

    RAI.prototype.getTimezone = function() {
      var ref;
      return (ref = this.config) != null ? ref.timezone : void 0;
    };

    RAI.prototype.getLocale = function() {
      var ref;
      return (ref = this.config) != null ? ref.locale : void 0;
    };

    RAI.prototype.getPort = function() {
      var ref;
      return (ref = this.config) != null ? ref.port : void 0;
    };

    RAI.prototype.getTasks = function() {
      return this.tasks;
    };

    RAI.prototype.getApp = function() {
      return this.app;
    };

    RAI.prototype.getServer = function() {
      return this.server;
    };

    RAI.prototype.getIo = function() {
      return this.io;
    };

    RAI.prototype.isDebug = function() {
      var ref;
      return (ref = this.config) != null ? ref.debug : void 0;
    };

    RAI.prototype.setConfig = function(config) {
      this.config = config;
    };

    RAI.prototype.setTasks = function(tasks) {
      this.tasks = tasks;
    };

    return RAI;

  })();

  fs = require('fs');

  Protocol = (function() {
    function Protocol(__smith, __config) {
      this.__smith = __smith;
      this.__config = __config;
      this.setup();
    }

    Protocol.prototype.setup = function() {
      var it;
      it = this;
      return this.getIo().of('/gate').on('connection', function(socket) {
        it.log("connected " + socket.id);
        socket.emit('who');
        return socket.on('handshake', function(agent) {
          var room;
          it.log("handshake with " + agent.type);
          room = agent.type;
          socket.join(room);
          it.log("agent join to room " + room);
          return it.getIo().of('/gate')["in"](room).clients(function(err, agents) {
            if (err) {
              throw err;
            }
            return socket.emit('join', {
              name: room,
              length: agents.length
            });
          });
        }).on('accept', function(task) {
          task = it.getAgent().findTask(task);
          task.accepted = true;
          it.log("agent " + task.type + " accepted task " + task._id);
          return it.getIo().of('/gate').to(socket.id).emit('exec', task._id);
        }).on('end', function(result) {
          var file, filename, next, ref, res, task;
          if (!(result != null ? result._id : void 0)) {
            throw 'RESULT_FAILED';
          }
          task = it.getAgent().findTask({
            _id: result._id
          });
          it.getAgent().removeTask(task);
          console.log('TASK_BUFFER', it.getAgent().getTasks().length);
          if (task != null ? task.__next : void 0) {
            next = it.getAgent().findTask({
              _id: task.__next
            });
            res = next != null ? next.res : void 0;
            delete result._id;
            delete next.res;
            Object.assign(next, result);
            it.getAgent().startTask(next);
            next.res = res;
            return;
          }
          if (result != null ? result.file : void 0) {
            filename = result.file.name;
            file = fs.createWriteStream(filename);
            file.on('finish', function() {
              var filestream, k, ref, v;
              ref = result.file.headers;
              for (k in ref) {
                v = ref[k];
                task.res.setHeader(k, v);
              }
              filestream = fs.createReadStream(filename);
              filestream.pipe(task.res);
              return fs.unlink(filename);
            });
            file.write(result.file.body);
            return file.end();
          } else {
            return task != null ? (ref = task.res) != null ? ref.send(result) : void 0 : void 0;
          }
        }).on('err', function(err) {
          var after, ref, ref1, ref2, ref3, task;
          task = it.getAgent().findTask({
            _id: err._id
          });
          if (!(task != null ? task.__next : void 0) && (task != null ? task.res : void 0)) {
            it.removeTask(task);
            return task != null ? (ref = task.res) != null ? (ref1 = ref.status(err.code || 500)) != null ? ref1.send(err.msg || '') : void 0 : void 0 : void 0;
          }
          if (task != null ? task.__next : void 0) {
            it.removeTask(task);
            after = it.getAgent().findTask({
              _id: task.__next
            });
            it.removeTask(after);
            return after != null ? (ref2 = after.res) != null ? (ref3 = ref2.status(err.code || 500)) != null ? ref3.send(err.msg || '') : void 0 : void 0 : void 0;
          }
        }).on('disconnect', function() {
          it.log("disconnected client   " + socket.id);
        });
      });
    };

    Protocol.prototype.removeTask = function(task) {
      return this.getAgent().tasks.splice(this.getAgent().tasks.indexOf(task));
    };

    Protocol.prototype.isDebug = function() {
      var ref;
      return (ref = this.__config) != null ? ref.debug : void 0;
    };

    Protocol.prototype.getAgent = function() {
      return this.__smith;
    };

    Protocol.prototype.getIo = function() {
      return this.getAgent().getIo();
    };

    Protocol.prototype.log = function(msg) {
      if (this.isDebug()) {
        return console.log(msg);
      }
    };

    Protocol.prototype.warn = function(msg) {
      if (this.isDebug()) {
        return console.error(msg);
      }
    };

    return Protocol;

  })();

  Rai = (function(superClass) {
    extend(Rai, superClass);

    function Rai() {
      return Rai.__super__.constructor.apply(this, arguments);
    }

    Rai.prototype.setup = function() {
      this.__router = new Router(this);
      return this.__protocol = new Protocol(this, this.getConfig());
    };

    return Rai;

  })(RAI);

  module.exports = Rai;

}).call(this);
